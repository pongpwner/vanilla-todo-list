(()=>{"use strict";var e={772:(e,t,n)=>{n.d(t,{Z:()=>c});var o=n(537),r=n.n(o),a=n(645),i=n.n(a)()(r());i.push([e.id,"/*reset*/\n* {\n  box-sizing: border-box;\n  list-style: none;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n}\n\n.todo-form {\n  border: 1px solid black;\n}\n\n#content {\n  display: grid;\n  grid-template-columns: 1fr 3fr;\n  grid-template-rows: 1fr 4fr;\n}\n\n.todo-form {\n  grid-column: 2;\n  grid-row: 1;\n}\n\n.todo-list {\n  grid-column: 2;\n  grid-row: 2;\n}\n\n.project-form {\n  grid-column: 1;\n  grid-row: 1;\n  background-color: gray;\n}\n\n.project-list {\n  grid-column: 1;\n  grid-row: 2;\n  background-color: gray;\n}/*# sourceMappingURL=styles.css.map */","",{version:3,sources:["webpack://./src/styles/styles.scss","webpack://./src/styles/styles.css"],names:[],mappings:"AAAA,QAAA;AACA;EACE,sBAAA;EACA,gBAAA;ACCF;;ADCA;EACE,SAAA;EACA,UAAA;ACEF;;ADCA;EACE,uBAAA;ACEF;;ADCA;EACE,aAAA;EACA,8BAAA;EACA,2BAAA;ACEF;;ADAA;EACE,cAAA;EACA,WAAA;ACGF;;ADDA;EACE,cAAA;EACA,WAAA;ACIF;;ADFA;EACE,cAAA;EACA,WAAA;EACA,sBAAA;ACKF;;ADHA;EACE,cAAA;EACA,WAAA;EACA,sBAAA;ACMF,CAAA,qCAAA",sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(i[d]=!0)}for(var s=0;s<e.length;s++){var l=[].concat(e[s]);o&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),t.push(l))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),a="/*# ".concat(r," */"),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(i).concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var a={},i=[],c=0;c<e.length;c++){var d=e[c],s=o.base?d[0]+o.base:d[0],l=a[s]||0,u="".concat(s," ").concat(l);a[s]=l+1;var p=n(u),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)t[p].references++,t[p].updater(m);else{var A=r(m,o);o.byIndex=c,t.splice(c,0,{identifier:u,updater:A,references:1})}i.push(u)}return i}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var c=n(a[i]);t[c].references--}for(var d=o(e,r),s=0;s<a.length;s++){var l=n(a[s]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}a=d}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var a=t[o]={id:o,exports:{}};return e[o](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{var e=n(379),t=n.n(e),o=n(795),r=n.n(o),a=n(569),i=n.n(a),c=n(565),d=n.n(c),s=n(216),l=n.n(s),u=n(589),p=n.n(u),m=n(772),A={};A.styleTagTransform=p(),A.setAttributes=d(),A.insert=i().bind(null,"head"),A.domAPI=r(),A.insertStyleElement=l(),t()(m.Z,A),m.Z&&m.Z.locals&&m.Z.locals;const f=function(e){let t=[];return{tasks:t,name:e,addTask:function(e){this.tasks.push(e),console.log(t)},removeTask:function(e){this.tasks=this.tasks.filter((t=>t.title!==e)),console.log(this)}}},C={todoList:[f("default")],addProject:function(e){this.todoList.push(e)},removeProject:function(e){this.todoList=this.todoList.filter((t=>t.name!==e)),console.log(this)}};(function(){let e=C.todoList[0];const t=document.querySelector("#content"),n=document.createElement("form");n.classList.add("todo-form");const o=document.createElement("h1");o.textContent="New Task",n.appendChild(o);const r=document.createElement("ul");r.classList.add("form-section"),n.appendChild(r);const a=document.createElement("li"),i=document.createElement("label");i.setAttribute("for","title"),i.textContent="title:";const c=document.createElement("input");c.setAttribute("id","title"),c.type="text",a.appendChild(i),a.appendChild(c);const d=document.createElement("li"),s=document.createElement("label");s.setAttribute("for","desription"),s.textContent="description:";const l=document.createElement("input");l.setAttribute("id","desription"),l.type="text",d.appendChild(s),d.appendChild(l);const u=document.createElement("li"),p=document.createElement("label");p.setAttribute("for","due-date"),p.textContent="due date:";const m=document.createElement("input");m.setAttribute("id","due-date"),m.type="date",u.appendChild(p),u.appendChild(m);const A=document.createElement("li"),h=document.createElement("label");h.setAttribute("for","priority"),h.textContent="priority:";const v=document.createElement("input"),E=document.createElement("input");v.setAttribute("id","low"),E.setAttribute("id","high");const b=document.createElement("label");b.textContent="low:";const y=document.createElement("label");y.textContent="high",b.setAttribute("for","low"),y.setAttribute("for","high"),v.type="radio",v.value="low",v.name="priority",E.type="radio",E.name="priority",E.value="high",A.appendChild(h),A.appendChild(b),A.appendChild(v),A.appendChild(y),A.appendChild(E),r.appendChild(a),r.appendChild(d),r.appendChild(u),r.appendChild(A);const g=document.createElement("button");g.type="buton",g.textContent="Submit",g.addEventListener("click",(t=>{let o;t.preventDefault();let r=document.getElementsByName("priority");for(let e=0,t=r.length;e<t;e++)if(r[e].checked){o=r[e].value;break}let a=(i=c.value,d=l.value,s=m.value,{title:i,description:d,dueDate:s,priority:o});var i,d,s;console.log(C.todoList[0]),e.addTask(a),n.reset(),P(x),I(e)})),n.appendChild(g);const x=document.createElement("ul");x.classList.add("todo-list");const L=document.createElement("h1");L.textContent=e.name,x.appendChild(L);const k=document.createElement("form");k.classList.add("project-form");const w=document.createElement("h1");w.textContent="New Project",k.appendChild(w);const j=document.createElement("div");j.classList.add("form-section"),k.appendChild(j);const T=document.createElement("label");T.textContent="Project Name:",T.setAttribute("for","project-name");const D=document.createElement("input");D.type="text",D.setAttribute("id","project-name");const S=document.createElement("button");S.type="buton",S.textContent="Submit",S.addEventListener("click",(e=>{e.preventDefault();let t=f(D.value);C.addProject(t),P(F),M(),k.reset()})),j.appendChild(T),j.appendChild(D),j.appendChild(S);const F=document.createElement("ul");function M(){C.todoList.forEach((t=>{let n=document.createElement("li");n.textContent=t.name,n.addEventListener("click",(()=>{e=t,L.textContent=e.name,P(x),I(e),console.log(e)})),F.appendChild(n);let o=document.createElement("button");o.textContent="remove",n.appendChild(o),o.addEventListener("click",(()=>{C.removeProject(t.name),P(F),M()}))}))}function I(t){x.appendChild(L),t.tasks.forEach((n=>{let o=document.createElement("li");o.addEventListener("click",(()=>{o.contains(a)?o.removeChild(a):o.appendChild(a)})),x.appendChild(o);let r=document.createElement("div");r.textContent=n.title;let a=document.createElement("div");a.textContent=n.description,a.classList.add("description");let i=document.createElement("div");i.textContent=n.dueDate;let c=document.createElement("div");c.textContent=n.priority,o.appendChild(r),o.appendChild(i),o.appendChild(c);let d=document.createElement("button");d.textContent="remove",o.appendChild(d),d.addEventListener("click",(()=>{t.removeTask(n.title),P(x),I(e)}))}))}function P(e){for(;e.firstChild;)e.removeChild(e.firstChild)}return F.classList.add("project-list"),{loadUI:function(){t.appendChild(n),t.appendChild(x),t.appendChild(k),t.appendChild(F),M()}}})().loadUI()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,